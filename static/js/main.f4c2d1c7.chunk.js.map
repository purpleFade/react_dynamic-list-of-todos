{"version":3,"sources":["components/Todoitem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/Select.ts","components/TodoModal/TodoModal.tsx","components/Helpers/helper.ts","App.tsx","index.tsx"],"names":["TodoItem","todos","onSelectTodo","todoSelected","map","todo","className","id","completed","title","type","onClick","TodoList","TodoFilter","onQuery","query","onStatus","status","value","onChange","event","target","placeholder","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Select","TodoModal","onClose","useState","user","setUser","loading","setLoading","emailLink","setEmailLink","fetchUser","a","userId","userData","email","Error","String","useEffect","item","href","name","App","todosFromAPI","setTodosFromAPI","isLoading","setIsLoading","todoChosen","setTodoChosen","setQuery","setStatus","finally","todosToRender","useMemo","todosToProceed","filter","toLowerCase","includes","trim","ACTIVE","COMPLETED","filterTodos","newQuery","givenStatus","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4c2d1c7.chunk.js","sourcesContent":["import { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  onSelectTodo: (todo: Todo) => void;\n  todoSelected: Todo | null;\n};\n\n// eslint-disable-next-line max-len\nexport const TodoItem: React.FC<Props> = ({ todos, onSelectTodo, todoSelected }) => {\n  return (\n    <>\n      {todos.map((todo) => (\n        <tr data-cy=\"todo\" className=\"\">\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={\n                todo.completed ? 'has-text-success' : 'has-text-danger'\n              }\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onSelectTodo(todo)}\n            >\n              <span className=\"icon\">\n                <i\n                  className={\n                    todoSelected?.id !== todo.id\n                      ? 'far fa-eye'\n                      : 'far fa-eye-slash'\n                  }\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../Todoitem';\n\ntype Props = {\n  todos: Todo[];\n  onSelectTodo: (todo: Todo) => void;\n  todoSelected: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelectTodo,\n  todoSelected,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      <TodoItem\n        todos={todos}\n        onSelectTodo={onSelectTodo}\n        todoSelected={todoSelected}\n      />\n    </tbody>\n  </table>\n);\n","import { Select } from '../../types/Select';\n\ntype Props = {\n  onQuery: (query: string) => void;\n  query: string;\n  onStatus: (value: Select) => void;\n  status: string;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onQuery,\n  query,\n  onStatus,\n  status,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={status}\n          onChange={(event) => onStatus(event.target.value as Select)}\n        >\n          <option value=\"all\">All</option>\n\n          <option value=\"active\">Active</option>\n\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => onQuery(event?.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\">\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onQuery('')}\n          >\n            Clear\n          </button>\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Select {\n  ALL = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  onClose: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [emailLink, setEmailLink] = useState<string>('');\n\n  const fetchUser = async () => {\n    setLoading(true);\n    try {\n      const userData = await getUser(todo.userId);\n\n      setUser([userData]);\n      setEmailLink(`mailto:${userData.email}`);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      throw new Error(String(err));\n    }\n  };\n\n  useEffect(() => {\n    fetchUser();\n  }, [todo.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        user.map((item) => (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={onClose}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo.completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n                {' by '}\n\n                <a href={emailLink}>{item.name}</a>\n              </p>\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { Select } from '../../types/Select';\n\nexport const filterTodos = (\n  todosFromAPI: Todo[],\n  query: string,\n  status: Select,\n): Todo[] => {\n  let todosToProceed = [...todosFromAPI];\n\n  if (query) {\n    todosToProceed = todosToProceed.filter(\n      (todo) => todo.title.toLowerCase().includes(query.toLowerCase().trim()),\n    );\n  }\n\n  if (status) {\n    switch (status) {\n      case Select.ACTIVE: {\n        todosToProceed = todosToProceed.filter((todo) => !todo.completed);\n        break;\n      }\n\n      case Select.COMPLETED: {\n        todosToProceed = todosToProceed.filter((todo) => todo.completed);\n        break;\n      }\n\n      default: {\n        return todosToProceed;\n      }\n    }\n  }\n\n  return todosToProceed;\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Select } from './types/Select';\nimport { filterTodos } from './components/Helpers/helper';\n\nexport const App: React.FC = () => {\n  const [todosFromAPI, setTodosFromAPI] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [todoChosen, setTodoChosen] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState<string>('');\n\n  useEffect(() => {\n    getTodos()\n      .then((todos) => {\n        setTodosFromAPI(todos);\n      })\n      .finally(() => setIsLoading(true));\n  }, []);\n\n  const todosToRender: Todo[] = useMemo(\n    () => filterTodos(todosFromAPI, query, status as Select),\n    [todosFromAPI, query, status],\n  );\n\n  const handleQuery = (newQuery: string) => {\n    setQuery(newQuery);\n  };\n\n  const handleSelect = (givenStatus: string) => {\n    setStatus(givenStatus);\n  };\n\n  const resetTodo = () => {\n    setTodoChosen(null);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onQuery={handleQuery}\n                query={query}\n                onStatus={handleSelect}\n                status={status}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <TodoList\n                  todos={todosToRender}\n                  onSelectTodo={setTodoChosen}\n                  todoSelected={todoChosen}\n                />\n              ) : (\n                <Loader />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todoChosen && <TodoModal todo={todoChosen} onClose={resetTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}